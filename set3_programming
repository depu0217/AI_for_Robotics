Q4
  def move(self, motion,tolerance=0.001): # Do not change the name of this function

        alpha = motion[0]
        d     = motion[1]
        if abs(steering)>max_steering_angle:
            raise ValueError,'Exceeding max steering angle'
        if distance<0.0:
            raise ValueError, 'Moving backwards is not valid'
        # make a copy
        res = robot()
        res.L = self.length
        res.bearing_noise  = self.bearing_noise
        res.steering_noise = self.steering_noise
        res.distance_noise = self.distance_noise
        
        # apply noise
        alpha2 = random.gauss(alpha, self.steering_noise)
        d2     = random.gauss(d, self.distance_noise)

        #Execute motion
        beta=tan(alpha2)*d2/res.L
        
        if abs(beta)<tolerance:
            #linear approximation
            res.x=self.x + (d2 * cos(self.orientation))
            res.y=self.y + (d2 * sin(self.orientation))
            res.orientation = (self.orientation + turn) % (2.0 * pi)
        else:
            # bicycle model for motion
            R  = d2/ beta
            cx = self.x - sin(self.orientation)*R
            cy = self.y + cos(self.orientation)*R
            res.orientation = (self.orientation + beta) % (2.0 * pi)
            self.x = cx + sin(res.orientation)*R
            self.y = cy - cos(res.orientation)*R
        
        return res 

Q5
    def sense(self,add_noise=1): #do not change the name of this function
        Z = []

        # ENTER CODE HERE
        # HINT: You will probably need to use the function atan2()
        for l in range(len(landmarks)):
            bearing=atan2(landmarks[l][0]-self.y,landmarks[l][1]-self.x)-self.orientation
            if add_noise: 
                bearing = bearing + random.gauss(0.0,self.bearing_noise)
            bearing = bearing % (2.0*pi)
            Z.append(bearing)
        return Z #Leave this line here. Return vector Z of 4 bearings


